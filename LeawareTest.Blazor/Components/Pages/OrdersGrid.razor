@page "/"
@using LeawareTest.Blazor.Services
@inject ApiClient ApiClient

<h3>Orders</h3>

@if (_orders == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Quantity</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in _orders)
            {
                <tr>
                    <td>@order.Product</td>
                    <td>@order.Count</td>
                    <td>@order.Price</td>
                </tr>
            }
        </tbody>
    </table>

    <nav>
        <ul class="pagination">
            <li class="page-item @(_currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => LoadOrders(_currentPage - 1)">Previous</button>
            </li>
            @for (int i = 1; i <= _totalPages; i++)
            {
                <li class="page-item @(_currentPage == i ? "active" : "")">
                    <button class="page-link" @onclick="() => LoadOrders(i)">@i</button>
                </li>
            }
            <li class="page-item @(_currentPage == _totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="async () => await LoadOrders(_currentPage+1) ">Next</button>
            </li>
        </ul>
    </nav>
}

@code {
    private const int PageSize = 10;
    private IReadOnlyCollection<OrderDto>? _orders;
    private int _currentPage = 1;
    private int _totalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders(1);
    }

    private async Task LoadOrders(int page)
    {
        (_orders, _totalPages) = await ApiClient.LoadOrders(page, PageSize);
        _currentPage = page;
    }
}
